// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://swagger.io/terms/",
        "contact": {
            "name": "MD ALISHAN",
            "email": "ahmed.alishan3@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health/v1/status": {
            "get": {
                "description": "Health status of resources like database, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Home"
                ],
                "summary": "Provides resource health status.",
                "operationId": "healthStatus",
                "parameters": [
                    {
                        "type": "string",
                        "description": "X-User-Id Header",
                        "name": "X-User-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "X-Request-Id Header",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "X-Location Header",
                        "name": "X-Location",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.APISuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.HealthApiResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.APIFailureResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.APIFailureResponse"
                        }
                    }
                }
            }
        },
        "/home/v1/activities": {
            "get": {
                "description": "It fetches the response from boredapi.com and returns three unique keys with their activity value",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Home"
                ],
                "summary": "Get Activities Api returns 3 distinct activity values.",
                "operationId": "getActivities",
                "parameters": [
                    {
                        "type": "string",
                        "description": "X-User-Id Header",
                        "name": "X-User-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "X-Request-Id Header",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "X-Location Header",
                        "name": "X-Location",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.APISuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.BoredApiResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.APIFailureResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.APIFailureResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.APIFailureResponse": {
            "type": "object",
            "properties": {
                "errorcode": {
                    "type": "string",
                    "example": "CE10001"
                },
                "message": {
                    "type": "string",
                    "example": "INTERNAL SERVER ERROR"
                },
                "status": {
                    "type": "boolean",
                    "enum": [
                        true,
                        false
                    ],
                    "example": false
                }
            }
        },
        "model.APISuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "status": {
                    "type": "boolean",
                    "enum": [
                        true,
                        false
                    ],
                    "example": false
                }
            }
        },
        "model.BoredApiResponse": {
            "type": "object",
            "properties": {
                "activity": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "model.HealthApiResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Home Assignment",
	Description:      "## ## An assignment.\n\nX-User-Id \t\t\te.g. => 'X-User-Id':'1234'\nX-Request-Id \t\te.g. => 'X-Request-Id':'0bc86576911d7468f7bbd7d55fb2b72d'",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
